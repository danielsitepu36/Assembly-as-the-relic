     1                                  %INCLUDE "winAPI.inc"		;;Declare external procedure {winapi}
     1                              <1> extern ExitProcess
     2                              <1> extern AllocConsole 
     3                              <1> extern FreeConsole 
     4                              <1> extern SetConsoleTitleA 
     5                              <1> extern Sleep 
     6                              <1> extern GetStdHandle
     7                              <1> extern ReadFile
     8                              <1> extern WriteFile
     9                              <1> 
    10                              <1> import ExitProcess		kernel32.dll
    11                              <1> import AllocConsole		kernel32.dll 
    12                              <1> import FreeConsole		kernel32.dll 
    13                              <1> import SetConsoleTitleA		kernel32.dll 
    14                              <1> import Sleep 			kernel32.dll
    15                              <1> import GetStdHandle 		kernel32.dll
    16                              <1> import ReadFile			kernel32.dll
    17                              <1> import WriteFile		kernel32.dll
     2                                  %INCLUDE "Console.mac"		;;Macro definition
     1                              <1> %macro BuatConsole 3
     2                              <1> 	
     3                              <1> 	call [AllocConsole] 
     4                              <1> 
     5                              <1> 	push dword %1 
     6                              <1> 	call [SetConsoleTitleA] 
     7                              <1> 
     8                              <1> 	push dword -11 				
     9                              <1> 	call [GetStdHandle] 
    10                              <1> 	mov dword [%2], eax 
    11                              <1> 
    12                              <1> 	push dword -10				 
    13                              <1> 	call [GetStdHandle] 
    14                              <1> 	mov dword [%3], eax 
    15                              <1> 
    16                              <1> %endmacro
    17                              <1> 
    18                              <1> %macro TampilkanText 4
    19                              <1> 	push dword 0 				
    20                              <1> 	push dword %4				
    21                              <1> 	push dword [%3] 			
    22                              <1> 	push dword %2				
    23                              <1> 	push dword [%1] 			
    24                              <1> 	call [WriteFile] 
    25                              <1> %endmacro
    26                              <1> 
    27                              <1> %macro BacaText 4
    28                              <1> 	push dword 0 		
    29                              <1> 	push dword %4 		
    30                              <1> 	push dword [%3] 	
    31                              <1> 	push dword %2 		
    32                              <1> 	push dword [%1] 	
    33                              <1> 	call [ReadFile] 			
    34                              <1> %endmacro
    35                              <1> 
    36                              <1> %macro TutupConsole 0
    37                              <1> 	call [FreeConsole] 
    38                              <1> 	xor eax, eax 
    39                              <1> 	push eax 
    40                              <1> 	call [ExitProcess]
    41                              <1> %endmacro
    42                              <1> 
    43                              <1> %macro Tunggu 1
    44                              <1> 	push dword %1*1000 		;; delay %1/1000 second 
    45                              <1> 	call [Sleep] 
    46                              <1> %endmacro
     3                                  
     4                                  SEGMENT .DATA use32
     5 00000000 4D494B524F50524F53-     Title   	db "MIKROPROSESOR DANIEL - 18290",0 
     5 00000009 45534F522044414E49-
     5 00000012 454C202D2031383239-
     5 0000001B 3000               
     6                                  
     7 0000001D 0D0A2D2D2D44616E69-     msg0 		db 13,10,"---Daniel Suranta S / 18-424185-PA-18290---",0
     7 00000026 656C20537572616E74-
     7 0000002F 612053202F2031382D-
     7 00000038 3432343138352D5041-
     7 00000041 2D31383239302D2D2D-
     7 0000004A 00                 
     8 0000004B 2E000000                msg0_len 	dd $-msg0
     9 0000004F 0D0A3D3D3D3D3D3D3D-     deco		db 13,10,"===========================================",0
     9 00000058 3D3D3D3D3D3D3D3D3D-
     9 00000061 3D3D3D3D3D3D3D3D3D-
     9 0000006A 3D3D3D3D3D3D3D3D3D-
     9 00000073 3D3D3D3D3D3D3D3D3D-
     9 0000007C 00                 
    10 0000007D 2E000000                deco_len	dd $-deco
    11 00000081 0D0A416E676B612070-     msg1 		db 13,10,"Angka pertama     =>",0
    11 0000008A 657274616D61202020-
    11 00000093 20203D3E00         
    12 00000098 17000000                msg1_len 	dd $-msg1
    13 0000009C 0D0A416E676B61206B-     msg2 		db 13,10,"Angka kedua       =>",0
    13 000000A5 656475612020202020-
    13 000000AE 20203D3E00         
    14 000000B3 17000000                msg2_len 	dd $-msg2
    15 000000B7 0D0A4D6173756B6B61-     msg3 		db 13,10,"Masukkan Operasi, Untuk pengurangan hasil bisa negatif, pembagian termasuk hasil dan sisa bagi(modulo)",0
    15 000000C0 6E204F706572617369-
    15 000000C9 2C20556E74756B2070-
    15 000000D2 656E677572616E6761-
    15 000000DB 6E20686173696C2062-
    15 000000E4 697361206E65676174-
    15 000000ED 69662C2070656D6261-
    15 000000F6 6769616E207465726D-
    15 000000FF 6173756B2068617369-
    15 00000108 6C2064616E20736973-
    15 00000111 612062616769286D6F-
    15 0000011A 64756C6F2900       
    16 00000120 69000000                msg3_len 	dd $-msg3
    17 00000124 0D0A4F706572617369-     msg4 		db 13,10,"Operasi (+,-,*,/) => ",0
    17 0000012D 20282B2C2D2C2A2C2F-
    17 00000136 29203D3E2000       
    18 0000013C 18000000                msg4_len 	dd $-msg4
    19 00000140 0D0A496E7075742079-     wrong 		db 13,10,"Input yang anda masukkan salah !",13,10,0
    19 00000149 616E6720616E646120-
    19 00000152 6D6173756B6B616E20-
    19 0000015B 73616C616820210D0A-
    19 00000164 00                 
    20 00000165 25000000                wrong_len 	dd $-wrong
    21 00000169 0D0A486173696C2070-     msg5 		db 13,10,"Hasil perhitungan => ",0
    21 00000172 6572686974756E6761-
    21 0000017B 6E203D3E2000       
    22 00000181 18000000                msg5_len 	dd $-msg5
    23 00000185 0D0A0D0A544552494D-     msg6 		db 13,10,13,10,"TERIMA KASIH",13,10,0
    23 0000018E 41204B415349480D0A-
    23 00000197 00                 
    24 00000198 13000000                msg6_len 	dd $-msg6
    25 0000019C 0D0A486173696C2070-     msgdiv1		db 13,10,"Hasil pembagian   => ",0
    25 000001A5 656D62616769616E20-
    25 000001AE 20203D3E2000       
    26 000001B4 18000000                msgd1_len 	dd $-msgdiv1
    27 000001B8 0D0A53697361207065-     msgdiv2		db 13,10,"Sisa pembagian    => ",0
    27 000001C1 6D62616769616E2020-
    27 000001CA 20203D3E2000       
    28 000001D0 18000000                msgd2_len 	dd $-msgdiv2
    29                                  
    30 000001D4 <res 000000FF>          op          resb 255
    31 000002D3 FF000000                op_len      dd 255
    32                                  
    33 000002D7 <res 000000FF>          buff		resb 255
    34 000003D6 FF000000                buff_len	dd 255
    35                                  
    36 000003DA 20202020202000          strhasil	db '      ',0
    37 000003E1 06                      str_len		db 6   
    38                                  
    39                                  
    40                                  SEGMENT .BSS  use32
    41 00000000 <res 00000004>          hStdOut		resd 1 
    42 00000004 <res 00000004>          hStdIn		resd 1 
    43 00000008 <res 00000004>          nBytes		resd 1
    44 0000000C <res 00000004>          iBytes		resd 1
    45 00000010 <res 00000004>          oBytes      resd 1
    46 00000014 <res 00000004>          Bil1		resd 1
    47 00000018 <res 00000004>          Bil2		resd 1
    48                                  
    49                                  
    50                                  SEGMENT .CODE use32
    51                                  ..start:
    52                                  
    53                                  BuatConsole 	Title, hStdOut, hStdIn
    53                              <1> 
    53 00000000 FF15[00000000]      <1>  call [AllocConsole]
    53                              <1> 
    53 00000006 68[00000000]        <1>  push dword %1
    53 0000000B FF15[00000000]      <1>  call [SetConsoleTitleA]
    53                              <1> 
    53 00000011 6AF5                <1>  push dword -11
    53 00000013 FF15[00000000]      <1>  call [GetStdHandle]
    53 00000019 A3[00000000]        <1>  mov dword [%2], eax
    53                              <1> 
    53 0000001E 6AF6                <1>  push dword -10
    53 00000020 FF15[00000000]      <1>  call [GetStdHandle]
    53 00000026 A3[04000000]        <1>  mov dword [%3], eax
    53                              <1> 
    54                                  
    55                                  TampilkanText	hStdOut, deco, deco_len, nBytes
    55 0000002B 6A00                <1>  push dword 0
    55 0000002D 68[08000000]        <1>  push dword %4
    55 00000032 FF35[7D000000]      <1>  push dword [%3]
    55 00000038 68[4F000000]        <1>  push dword %2
    55 0000003D FF35[00000000]      <1>  push dword [%1]
    55 00000043 FF15[00000000]      <1>  call [WriteFile]
    56                                  TampilkanText	hStdOut, msg0, msg0_len, nBytes
    56 00000049 6A00                <1>  push dword 0
    56 0000004B 68[08000000]        <1>  push dword %4
    56 00000050 FF35[4B000000]      <1>  push dword [%3]
    56 00000056 68[1D000000]        <1>  push dword %2
    56 0000005B FF35[00000000]      <1>  push dword [%1]
    56 00000061 FF15[00000000]      <1>  call [WriteFile]
    57                                  TampilkanText	hStdOut, deco, deco_len, nBytes
    57 00000067 6A00                <1>  push dword 0
    57 00000069 68[08000000]        <1>  push dword %4
    57 0000006E FF35[7D000000]      <1>  push dword [%3]
    57 00000074 68[4F000000]        <1>  push dword %2
    57 00000079 FF35[00000000]      <1>  push dword [%1]
    57 0000007F FF15[00000000]      <1>  call [WriteFile]
    58                                  
    59                                  TampilkanText	hStdOut, msg1, msg1_len, nBytes
    59 00000085 6A00                <1>  push dword 0
    59 00000087 68[08000000]        <1>  push dword %4
    59 0000008C FF35[98000000]      <1>  push dword [%3]
    59 00000092 68[81000000]        <1>  push dword %2
    59 00000097 FF35[00000000]      <1>  push dword [%1]
    59 0000009D FF15[00000000]      <1>  call [WriteFile]
    60                                  BacaText		hStdIn, buff, buff_len, iBytes
    60 000000A3 6A00                <1>  push dword 0
    60 000000A5 68[0C000000]        <1>  push dword %4
    60 000000AA FF35[D6030000]      <1>  push dword [%3]
    60 000000B0 68[D7020000]        <1>  push dword %2
    60 000000B5 FF35[04000000]      <1>  push dword [%1]
    60 000000BB FF15[00000000]      <1>  call [ReadFile]
    61                                  
    62 000000C1 833D[0C000000]02        CMP dword [iBytes],2    ;; if just Enter (2 char) then Exit
    63 000000C8 0F8463020000            JE  exit
    64                                  
    65 000000CE E868020000              CALL Str2Bil
    66 000000D3 A3[14000000]            MOV  [Bil1], EAX
    67                                  
    68                                  TampilkanText	hStdOut, msg2, msg2_len, nBytes
    68 000000D8 6A00                <1>  push dword 0
    68 000000DA 68[08000000]        <1>  push dword %4
    68 000000DF FF35[B3000000]      <1>  push dword [%3]
    68 000000E5 68[9C000000]        <1>  push dword %2
    68 000000EA FF35[00000000]      <1>  push dword [%1]
    68 000000F0 FF15[00000000]      <1>  call [WriteFile]
    69                                  BacaText		hStdIn, buff, buff_len, iBytes
    69 000000F6 6A00                <1>  push dword 0
    69 000000F8 68[0C000000]        <1>  push dword %4
    69 000000FD FF35[D6030000]      <1>  push dword [%3]
    69 00000103 68[D7020000]        <1>  push dword %2
    69 00000108 FF35[04000000]      <1>  push dword [%1]
    69 0000010E FF15[00000000]      <1>  call [ReadFile]
    70                                  
    71 00000114 E822020000              CALL Str2Bil
    72 00000119 A3[18000000]            MOV  [Bil2], EAX
    73                                  
    74                                  INPUT:
    75                                      TampilkanText	hStdOut, msg3, msg3_len, nBytes
    75 0000011E 6A00                <1>  push dword 0
    75 00000120 68[08000000]        <1>  push dword %4
    75 00000125 FF35[20010000]      <1>  push dword [%3]
    75 0000012B 68[B7000000]        <1>  push dword %2
    75 00000130 FF35[00000000]      <1>  push dword [%1]
    75 00000136 FF15[00000000]      <1>  call [WriteFile]
    76                                      TampilkanText	hStdOut, msg4, msg4_len, nBytes
    76 0000013C 6A00                <1>  push dword 0
    76 0000013E 68[08000000]        <1>  push dword %4
    76 00000143 FF35[3C010000]      <1>  push dword [%3]
    76 00000149 68[24010000]        <1>  push dword %2
    76 0000014E FF35[00000000]      <1>  push dword [%1]
    76 00000154 FF15[00000000]      <1>  call [WriteFile]
    77                                      BacaText		hStdIn, op, op_len, oBytes
    77 0000015A 6A00                <1>  push dword 0
    77 0000015C 68[10000000]        <1>  push dword %4
    77 00000161 FF35[D3020000]      <1>  push dword [%3]
    77 00000167 68[D4010000]        <1>  push dword %2
    77 0000016C FF35[04000000]      <1>  push dword [%1]
    77 00000172 FF15[00000000]      <1>  call [ReadFile]
    78                                  
    79 00000178 B9[D4010000]                mov ECX,op
    80                                  
    81 0000017D 80392B                      cmp byte [ECX],43
    82 00000180 7436                        je PLUS
    83 00000182 80392D                      cmp byte [ECX],45
    84 00000185 7446                        je MINUS
    85 00000187 80392A                      cmp byte [ECX],42
    86 0000018A 7477                        je TIMESS
    87 0000018C 80392F                      cmp byte [ECX],47
    88 0000018F 0F8489000000                je DIVIDE
    89                                  
    90                                      TampilkanText	hStdOut, wrong, wrong_len, nBytes
    90 00000195 6A00                <1>  push dword 0
    90 00000197 68[08000000]        <1>  push dword %4
    90 0000019C FF35[65010000]      <1>  push dword [%3]
    90 000001A2 68[40010000]        <1>  push dword %2
    90 000001A7 FF35[00000000]      <1>  push dword [%1]
    90 000001AD FF15[00000000]      <1>  call [WriteFile]
    91 000001B3 E966FFFFFF                  jmp INPUT
    92                                  
    93                                  PLUS:
    94 000001B8 A1[18000000]                mov EAX, [Bil2]
    95 000001BD 0305[14000000]              add EAX, [Bil1]
    96 000001C3 E897010000                  CALL Numeric2Str
    97 000001C8 E905010000                  jmp HASIL									; EAX = Bil1 + Bil2
    98                                  MINUS:
    99 000001CD A1[14000000]                mov EAX, [Bil1]
   100 000001D2 3B05[18000000]              cmp EAX, [Bil2]
   101 000001D8 7F17                        jg POS
   102 000001DA A1[18000000]                mov EAX, [Bil2]
   103 000001DF 8B1D[14000000]              mov EBX, [Bil1]
   104 000001E5 29D8                        sub EAX, EBX
   105 000001E7 E898010000                  CALL Numeric2StrNEG
   106 000001EC E9E1000000                  jmp HASIL
   107                                      POS:
   108 000001F1 8B1D[18000000]                  mov EBX, [Bil2]
   109 000001F7 29D8                            sub EAX, EBX
   110 000001F9 E861010000                      CALL Numeric2Str
   111 000001FE E9CF000000                      jmp HASIL
   112                                  
   113                                  TIMESS:
   114 00000203 31D2                        xor EDX,EDX
   115 00000205 A1[18000000]                mov EAX,[Bil2]
   116 0000020A 8B1D[14000000]              mov EBX, [Bil1]
   117 00000210 F7E3                        mul EBX
   118 00000212 31D2                        xor EDX,EDX
   119 00000214 E846010000                  CALL Numeric2Str		                            ; CONVERT TO STRING
   120 00000219 E9B4000000                  jmp HASIL
   121                                  
   122                                  DIVIDE:
   123 0000021E 31D2                        xor EDX,EDX
   124 00000220 A1[14000000]                mov EAX, [Bil1]
   125 00000225 8B1D[18000000]              mov EBX, [Bil2]
   126 0000022B F7F3                        div EBX
   127 0000022D 31D2                        xor EDX,EDX
   128 0000022F E82B010000                  CALL Numeric2Str
   129                                      TampilkanText	hStdOut, msgdiv1, msgd1_len, nBytes
   129 00000234 6A00                <1>  push dword 0
   129 00000236 68[08000000]        <1>  push dword %4
   129 0000023B FF35[B4010000]      <1>  push dword [%3]
   129 00000241 68[9C010000]        <1>  push dword %2
   129 00000246 FF35[00000000]      <1>  push dword [%1]
   129 0000024C FF15[00000000]      <1>  call [WriteFile]
   130                                      TampilkanText	hStdOut, strhasil, str_len, nBytes		; DISPLAY RESULT
   130 00000252 6A00                <1>  push dword 0
   130 00000254 68[08000000]        <1>  push dword %4
   130 00000259 FF35[E1030000]      <1>  push dword [%3]
   130 0000025F 68[DA030000]        <1>  push dword %2
   130 00000264 FF35[00000000]      <1>  push dword [%1]
   130 0000026A FF15[00000000]      <1>  call [WriteFile]
   131 00000270 31D2                        xor EDX,EDX
   132 00000272 A1[14000000]                mov EAX, [Bil1]
   133 00000277 8B1D[18000000]              mov EBX, [Bil2]
   134 0000027D F7F3                        div EBX
   135 0000027F 83FA00                      cmp EDX,0
   136 00000282 7507                        jne NOTZERO
   137 00000284 B800000000                  mov EAX,0
   138 00000289 EB02                        jmp NEXTDIV
   139                                          NOTZERO:
   140 0000028B 89D0                            mov EAX,EDX
   141                                      NEXTDIV:
   142 0000028D 31D2                        xor EDX,EDX
   143 0000028F E8CB000000                  CALL Numeric2Str
   144                                      TampilkanText	hStdOut, msgdiv2, msgd2_len, nBytes
   144 00000294 6A00                <1>  push dword 0
   144 00000296 68[08000000]        <1>  push dword %4
   144 0000029B FF35[D0010000]      <1>  push dword [%3]
   144 000002A1 68[B8010000]        <1>  push dword %2
   144 000002A6 FF35[00000000]      <1>  push dword [%1]
   144 000002AC FF15[00000000]      <1>  call [WriteFile]
   145                                      TampilkanText	hStdOut, strhasil, str_len, nBytes		; DISPLAY RESULT
   145 000002B2 6A00                <1>  push dword 0
   145 000002B4 68[08000000]        <1>  push dword %4
   145 000002B9 FF35[E1030000]      <1>  push dword [%3]
   145 000002BF 68[DA030000]        <1>  push dword %2
   145 000002C4 FF35[00000000]      <1>  push dword [%1]
   145 000002CA FF15[00000000]      <1>  call [WriteFile]
   146 000002D0 EB3C                        jmp END								; CONVERT TO STRING
   147                                  
   148                                  HASIL:
   149                                  TampilkanText	hStdOut, msg5, msg5_len, nBytes
   149 000002D2 6A00                <1>  push dword 0
   149 000002D4 68[08000000]        <1>  push dword %4
   149 000002D9 FF35[81010000]      <1>  push dword [%3]
   149 000002DF 68[69010000]        <1>  push dword %2
   149 000002E4 FF35[00000000]      <1>  push dword [%1]
   149 000002EA FF15[00000000]      <1>  call [WriteFile]
   150                                  TampilkanText	hStdOut, strhasil, str_len, nBytes		; DISPLAY RESULT
   150 000002F0 6A00                <1>  push dword 0
   150 000002F2 68[08000000]        <1>  push dword %4
   150 000002F7 FF35[E1030000]      <1>  push dword [%3]
   150 000002FD 68[DA030000]        <1>  push dword %2
   150 00000302 FF35[00000000]      <1>  push dword [%1]
   150 00000308 FF15[00000000]      <1>  call [WriteFile]
   151                                  
   152                                  END:
   153                                  TampilkanText	hStdOut, msg6, msg6_len, nBytes
   153 0000030E 6A00                <1>  push dword 0
   153 00000310 68[08000000]        <1>  push dword %4
   153 00000315 FF35[98010000]      <1>  push dword [%3]
   153 0000031B 68[85010000]        <1>  push dword %2
   153 00000320 FF35[00000000]      <1>  push dword [%1]
   153 00000326 FF15[00000000]      <1>  call [WriteFile]
   154                                  
   155 0000032C E9CFFCFFFF              JMP ..start
   156                                  
   157                                  exit:
   158 00000331 6A00                    push 0
   159 00000333 FF15[00000000]          call [ExitProcess]
   160 00000339 C9                      leave
   161 0000033A C3                      RET
   162                                  
   163                                  ;=================================================================================================
   164                                  ; CONVERT string(buff) to NUMERIC  result in register EAX 
   165                                  ;-------------------------------------------------------------------------------------
   166                                  Str2Bil:
   167 0000033B 31C0                            xor eax,eax			;set hasil = 0
   168 0000033D BE0A000000                      mov esi, 10			;pengali 10
   169 00000342 BB[D7020000]                    mov ebx, buff
   170 00000347 8B0D[0C000000]          	mov ecx, [iBytes]
   171 0000034D 83E902                  	sub ecx, 2
   172 00000350 31D2                    	xor edx,edx
   173                                      Loopbil:
   174 00000352 F7E6                            mul esi 			;hasil sebelumnya * 10
   175 00000354 8A13                            mov dl, byte [ebx]
   176 00000356 80EA30                          sub dl,30h 			;ubah ke 0-9
   177 00000359 01D0                            add eax,edx 			;tambahkan dg digit terakhir 
   178 0000035B 43                              inc ebx
   179 0000035C E2F4                            loop Loopbil
   180                                      
   181 0000035E C3                      ret
   182                                  
   183                                  ; CONVERT Numeric (EAX) TO STRING (strhasil) 
   184                                  ;-------------------------------------------------------------------------------------
   185                                  Numeric2Str: 
   186                                  
   187 0000035F BB[DA030000]            	mov ebx, strhasil	;; hasil konversi disimpan di strhasil  
   188                                   
   189                                   loop1:
   190 00000364 803B00                      cmp byte[ebx],0		;; diposisikan pada akhir string strhasil
   191 00000367 7406                        je NEXTNULL
   192 00000369 C60320                      mov byte[ebx],32
   193 0000036C 43                          inc ebx
   194 0000036D EBF5                        jmp loop1
   195                                  
   196                                  NEXTNULL:
   197 0000036F 4B                      	dec ebx
   198                                  
   199 00000370 66BE0A00                	mov si,10	      		
   200                                   loop2:				
   201 00000374 31D2                    	xor edx, edx		;; edx di-nolkan untuk menampung sisa bagi
   202 00000376 66F7F6                  	div si			;; dilakukan pembagian 10 berulang
   203 00000379 80C230                  	add dl, '0'        	;; sisa bagi pada edx (dl) di ubah ke character
   204 0000037C 8813                    	mov [ebx], dl		;; simpan ke strhasil dari belakang ke depan
   205 0000037E 4B                      	dec ebx			;; majukan pointer
   206 0000037F 09C0                    	or  eax,eax		;; test apakah yang dibagi sudah nol
   207 00000381 75F1                    	jnz loop2 		;; selesai perulangan jika yang dibagi sdh nol   
   208                                  
   209 00000383 C3                      ret
   210                                  
   211                                  ; CONVERT Numeric (EAX) TO STRING (strhasil) KHUSUS PENGURANGAN NEGATIF
   212                                  ;-------------------------------------------------------------------------------------
   213                                  Numeric2StrNEG: 
   214                                  
   215 00000384 BB[DA030000]            	mov ebx, strhasil	;; hasil konversi disimpan di strhasil  
   216                                   
   217                                   loop1NEG:
   218 00000389 803B00                      cmp byte[ebx],0		;; diposisikan pada akhir string strhasil
   219 0000038C 7406                        je NEXTNULLNEG
   220 0000038E C60320                      mov byte[ebx],32
   221 00000391 43                          inc ebx
   222 00000392 EBF5                        jmp loop1NEG
   223                                  
   224                                  NEXTNULLNEG:
   225 00000394 4B                      	dec ebx
   226                                  
   227 00000395 66BE0A00                	mov si,10	      		
   228                                   loop2NEG:				
   229 00000399 31D2                    	xor edx, edx		;; edx di-nolkan untuk menampung sisa bagi
   230 0000039B 66F7F6                  	div si			;; dilakukan pembagian 10 berulang
   231 0000039E 80C230                  	add dl, '0'        	;; sisa bagi pada edx (dl) di ubah ke character
   232 000003A1 8813                    	mov [ebx], dl		;; simpan ke strhasil dari belakang ke depan
   233 000003A3 4B                      	dec ebx			;; majukan pointer
   234 000003A4 09C0                    	or  eax,eax		;; test apakah yang dibagi sudah nol
   235 000003A6 75F1                    	jnz loop2NEG 		;; selesai perulangan jika yang dibagi sdh nol   
   236                                  
   237 000003A8 C6032D                      mov byte[ebx],45
   238                                  
   239 000003AB C3                      ret
