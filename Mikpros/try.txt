     1                                  %include "console.inc"
     1                              <1> extern GetStdHandle 
     2                              <1> extern WriteFile 
     3                              <1> extern ReadFile 
     4                              <1> extern AllocConsole 
     5                              <1> extern FreeConsole 
     6                              <1> extern SetConsoleTitleA 
     7                              <1> extern SetConsoleCursorPosition 
     8                              <1> extern Sleep 
     9                              <1> extern ExitProcess 
    10                              <1> EXTERN MessageBoxA
    11                              <1> 
    12                              <1> import GetStdHandle kernel32.dll 
    13                              <1> import WriteFile kernel32.dll 
    14                              <1> import ReadFile kernel32.dll 
    15                              <1> import AllocConsole kernel32.dll 
    16                              <1> import FreeConsole kernel32.dll 
    17                              <1> import SetConsoleTitleA kernel32.dll 
    18                              <1> import SetConsoleCursorPosition kernel32.dll 
    19                              <1> import Sleep kernel32.dll 
    20                              <1> import ExitProcess kernel32.dll
    21                              <1> IMPORT MessageBoxA user32.dll 
    22                              <1> 
    23                              <1> %macro initconsole 3
    24                              <1> 	
    25                              <1> 	call [AllocConsole] 
    26                              <1> 
    27                              <1> 	push dword %1 
    28                              <1> 	call [SetConsoleTitleA] 
    29                              <1> 
    30                              <1> 	push dword -11 				;; STD_OUTPUT_HANDLE = -11.
    31                              <1> 	call [GetStdHandle] 
    32                              <1> 	mov dword [%2], eax 
    33                              <1> 
    34                              <1> 	push dword -10				;; STD_INPUT_HANDLE = -10 
    35                              <1> 	call [GetStdHandle] 
    36                              <1> 	mov dword [%3], eax 
    37                              <1> 
    38                              <1> %endmacro
    39                              <1> 
    40                              <1> %macro quitconsole 0
    41                              <1> 	call [FreeConsole] 
    42                              <1> 	xor eax, eax 
    43                              <1> 	push eax 
    44                              <1> 	call [ExitProcess]
    45                              <1> %endmacro
    46                              <1> 
    47                              <1> %macro delay 1
    48                              <1> 	push dword %1 				;; delay %1/1000 second 
    49                              <1> 	call [Sleep] 
    50                              <1> %endmacro
    51                              <1> 
    52                              <1> %macro display_text 4
    53                              <1> 	mov eax, %2			
    54                              <1> 	sub eax, %1 		
    55                              <1> 	dec eax 			
    56                              <1> 	mov dword [%2], eax 
    57                              <1> 
    58                              <1> 	push dword 0 				;; parameter ke 5 dari WriteFile() adalah 0 
    59                              <1> 	push dword %3				;; parameter ke 4 jumlah byte yg sesungguhnya tertulis
    60                              <1> 	push dword [%2] 			;; parameter ke 3 panjang string
    61                              <1> 	push dword %1				;; parameter ke 2 string yang akan ditampilkan 
    62                              <1> 	push dword [%4] 			;; parameter ke 1 handle stdout
    63                              <1> 	call [WriteFile] 
    64                              <1> %endmacro
     2                                  
     3 00000000 4D494B524F50524F53-     Title   	db "MIKROPROSESOR DANIEL - 18290",0 
     3 00000009 45534F522044414E49-
     3 00000012 454C202D2031383239-
     3 0000001B 3000               
     4                                  
     5 0000001D 0D0A2D2D2D44616E69-     msg0 		db 13,10,"---Daniel Suranta S / 18-424185-PA-18290---",0
     5 00000026 656C20537572616E74-
     5 0000002F 612053202F2031382D-
     5 00000038 3432343138352D5041-
     5 00000041 2D31383239302D2D2D-
     5 0000004A 00                 
     6 0000004B 2E000000                msg0_len 	dd $-msg0
     7 0000004F 0D0A3D3D3D3D3D3D3D-     deco		db 13,10,"===========================================",0
     7 00000058 3D3D3D3D3D3D3D3D3D-
     7 00000061 3D3D3D3D3D3D3D3D3D-
     7 0000006A 3D3D3D3D3D3D3D3D3D-
     7 00000073 3D3D3D3D3D3D3D3D3D-
     7 0000007C 00                 
     8 0000007D 2E000000                deco_len	dd $-deco
     9 00000081 0D0A4D6173756B6B61-     msgout 		db 13,10,"Masukkan '0' untuk selesai !",0
     9 0000008A 6E2027302720756E74-
     9 00000093 756B2073656C657361-
     9 0000009C 69202100           
    10 000000A0 1F000000                msgo_len 	dd $-msgout
    11 000000A4 0D0A4D6173756B6B61-     msg1 		db 13,10,"Masukkan angka     =>",0
    11 000000AD 6E20616E676B612020-
    11 000000B6 2020203D3E00       
    12 000000BC 18000000                msg1_len 	dd $-msg1
    13 000000C0 0D0A446F20796F7520-     msgbox 		db 13,10,"Do you want to retry ? ",0
    13 000000C9 77616E7420746F2072-
    13 000000D2 65747279203F2000   
    14 000000DA 1A000000                box_len 	dd $-msgbox
    15                                  
    16 000000DE 484153494C2050454E-     mbtitle db 'HASIL PENJUMLAHAN',0
    16 000000E7 4A554D4C4148414E00 
    17 000000F0 486173696C203D20        mbtext	    db 'Hasil = '
    18 000000F8 202020202020202020-     strhasil	db '               ',0
    18 00000101 20202020202000     
    19 00000108 0F                      str_len		db 15  
    20                                  
    21 00000109 <res 000000FF>          buff		resb 255
    22 00000208 FF000000                buff_len	dd 255
    23                                  
    24                                  
    25                                  
    26                                  section .bss 	; Initialisasi variabel: hStdOut, hStdIn, nBytes, iBytes dg type double-word
    27                                  
    28 0000020C <res 00000004>          hStdOut         resd 1 
    29 00000210 <res 00000004>          hStdIn          resd 1 
    30 00000214 <res 00000004>          nBytes          resd 1
    31 00000218 <res 00000004>          iBytes          resd 1
    32                                  
    33                                  
    34                                  segment .code use32
    35                                  ..start:	
    36                                  
    37                                  initconsole     Title, hStdOut, hStdIn				; CREATE CONSOLE
    37                              <1> 
    37 00000000 FF15[00000000]      <1>  call [AllocConsole]
    37                              <1> 
    37 00000006 68[00000000]        <1>  push dword %1
    37 0000000B FF15[00000000]      <1>  call [SetConsoleTitleA]
    37                              <1> 
    37 00000011 6AF5                <1>  push dword -11
    37 00000013 FF15[00000000]      <1>  call [GetStdHandle]
    37 00000019 A3[0C020000]        <1>  mov dword [%2], eax
    37                              <1> 
    37 0000001E 6AF6                <1>  push dword -10
    37 00000020 FF15[00000000]      <1>  call [GetStdHandle]
    37 00000026 A3[10020000]        <1>  mov dword [%3], eax
    37                              <1> 
    38                                  display_text	deco, deco_len, nBytes, hStdOut
    38 0000002B B8[7D000000]        <1>  mov eax, %2
    38 00000030 2D[4F000000]        <1>  sub eax, %1
    38 00000035 48                  <1>  dec eax
    38 00000036 A3[7D000000]        <1>  mov dword [%2], eax
    38                              <1> 
    38 0000003B 6A00                <1>  push dword 0
    38 0000003D 68[14020000]        <1>  push dword %3
    38 00000042 FF35[7D000000]      <1>  push dword [%2]
    38 00000048 68[4F000000]        <1>  push dword %1
    38 0000004D FF35[0C020000]      <1>  push dword [%4]
    38 00000053 FF15[00000000]      <1>  call [WriteFile]
    39                                  display_text	msg0, msg0_len, nBytes, hStdOut
    39 00000059 B8[4B000000]        <1>  mov eax, %2
    39 0000005E 2D[1D000000]        <1>  sub eax, %1
    39 00000063 48                  <1>  dec eax
    39 00000064 A3[4B000000]        <1>  mov dword [%2], eax
    39                              <1> 
    39 00000069 6A00                <1>  push dword 0
    39 0000006B 68[14020000]        <1>  push dword %3
    39 00000070 FF35[4B000000]      <1>  push dword [%2]
    39 00000076 68[1D000000]        <1>  push dword %1
    39 0000007B FF35[0C020000]      <1>  push dword [%4]
    39 00000081 FF15[00000000]      <1>  call [WriteFile]
    40                                  display_text	deco, deco_len, nBytes, hStdOut
    40 00000087 B8[7D000000]        <1>  mov eax, %2
    40 0000008C 2D[4F000000]        <1>  sub eax, %1
    40 00000091 48                  <1>  dec eax
    40 00000092 A3[7D000000]        <1>  mov dword [%2], eax
    40                              <1> 
    40 00000097 6A00                <1>  push dword 0
    40 00000099 68[14020000]        <1>  push dword %3
    40 0000009E FF35[7D000000]      <1>  push dword [%2]
    40 000000A4 68[4F000000]        <1>  push dword %1
    40 000000A9 FF35[0C020000]      <1>  push dword [%4]
    40 000000AF FF15[00000000]      <1>  call [WriteFile]
    41                                  
    42                                  display_text	msgout, msgo_len, nBytes, hStdOut
    42 000000B5 B8[A0000000]        <1>  mov eax, %2
    42 000000BA 2D[81000000]        <1>  sub eax, %1
    42 000000BF 48                  <1>  dec eax
    42 000000C0 A3[A0000000]        <1>  mov dword [%2], eax
    42                              <1> 
    42 000000C5 6A00                <1>  push dword 0
    42 000000C7 68[14020000]        <1>  push dword %3
    42 000000CC FF35[A0000000]      <1>  push dword [%2]
    42 000000D2 68[81000000]        <1>  push dword %1
    42 000000D7 FF35[0C020000]      <1>  push dword [%4]
    42 000000DD FF15[00000000]      <1>  call [WriteFile]
    43                                  
    44 000000E3 31FF                    xor edi,edi
    45                                  
    46                                  input:
    47                                  display_text	msg1, msg1_len, nBytes, hStdOut 
    47 000000E5 B8[BC000000]        <1>  mov eax, %2
    47 000000EA 2D[A4000000]        <1>  sub eax, %1
    47 000000EF 48                  <1>  dec eax
    47 000000F0 A3[BC000000]        <1>  mov dword [%2], eax
    47                              <1> 
    47 000000F5 6A00                <1>  push dword 0
    47 000000F7 68[14020000]        <1>  push dword %3
    47 000000FC FF35[BC000000]      <1>  push dword [%2]
    47 00000102 68[A4000000]        <1>  push dword %1
    47 00000107 FF35[0C020000]      <1>  push dword [%4]
    47 0000010D FF15[00000000]      <1>  call [WriteFile]
    48 00000113 E8(2A000000)            call read_text									; READ TEXT FROM KEYBOARD
    49 00000118 E8(49000000)                call Str2Bil
    50 0000011D 83F800                      cmp eax,0
    51 00000120 7404                        je END
    52 00000122 01C7                        add edi, eax
    53 00000124 EBBF                        jmp input
    54                                  
    55                                  END:
    56 00000126 89F8                    mov eax,edi
    57 00000128 E8(6D000000)            call Numeric2Str
    58 0000012D 31C0                    xor eax,eax
    59 0000012F E8(00000000)            call mbox
    60 00000134 E8(15000000)            call exitbox
    61 00000139 83F807                  cmp eax, 7
    62 0000013C 7405                    je EXIT
    63                                  
    64 0000013E E9BDFEFFFF              jmp ..start
    65                                  
    66                                  EXIT:
    67                                  
    68 00000143 6A00                    push dword 0
    69 00000145 FF15[00000000]          call [ExitProcess]
    70 0000014B C9                      leave
    71 0000014C C3                      ret
    72                                  
    73                                  SEGMENT .DATA use32
    74                                  
    75                                  mbox:
    76                                  
    77 00000000 6A00                     push dword 0h			; tombol Button
    78 00000002 68[DE000000]             push dword mbtitle		; judul windows
    79 00000007 68[F0000000]             push dword mbtext    ; Pesan yg ditampilkan, diakhiri 0 (null)
    80 0000000C 6A00                     push dword 0			; owner windows dari msgbox, atau NULL (tdk punya owner)
    81                                  
    82 0000000E FF15[00000000]           call [MessageBoxA]
    83 00000014 C3                      ret
    84                                  
    85                                  exitbox:
    86                                   
    87 00000015 6A04                     push dword 4h			; tombol Button
    88 00000017 68[DE000000]             push dword mbtitle		; judul windows
    89 0000001C 68[C0000000]             push dword msgbox    ; Pesan yg ditampilkan, diakhiri 0 (null)
    90 00000021 6A00                     push dword 0			; owner windows dari msgbox, atau NULL (tdk punya owner)
    91                                  
    92 00000023 FF15[00000000]           call [MessageBoxA]
    93 00000029 C3                      ret
    94                                  
    95                                  read_text:
    96                                  							;; membaca string dari Console(keyboard) dg ReadFile
    97 0000002A 6A00                    push dword 0 				;; parameter ke 5 dari ReadFile() adalah 0 
    98 0000002C 68[18020000]            push dword iBytes 			;; parameter ke 4 jumlah byte yg sesungguhnya terbaca (TERMASUK ENTER)
    99 00000031 FF35[08020000]          push dword [buff_len] 		;; parameter ke 3 panjang buffer yg disediakan
   100 00000037 68[09010000]            push dword buff 			;; parameter ke 2 buffer untuk menyimpan string yg dibaca 
   101 0000003C FF35[10020000]          push dword [hStdIn] 		;; parameter ke 1 handle stdin
   102 00000042 FF15[00000000]          call [ReadFile] 			
   103 00000048 C3                      ret
   104                                  
   105                                  Str2Bil:
   106 00000049 31C0                            xor eax,eax			;set hasil = 0
   107 0000004B BE0A000000                      mov esi, 10			;pengali 10
   108 00000050 BB[09010000]                    mov ebx, buff
   109 00000055 8B0D[18020000]          	mov ecx, [iBytes]
   110 0000005B 83E902                  	sub ecx, 2
   111 0000005E 31D2                    	xor edx,edx
   112                                      Loopbil:
   113 00000060 F7E6                            mul esi 			;hasil sebelumnya * 10
   114 00000062 8A13                            mov dl, byte [ebx]
   115 00000064 80EA30                          sub dl,30h 			;ubah ke 0-9
   116 00000067 01D0                            add eax,edx 			;tambahkan dg digit terakhir 
   117 00000069 43                              inc ebx
   118 0000006A E2F4                            loop Loopbil
   119                                      
   120 0000006C C3                      ret
   121                                  
   122                                  Numeric2Str: 
   123                                  
   124 0000006D BB[F8000000]            	mov ebx, strhasil	;; hasil konversi disimpan di strhasil  
   125                                   
   126                                   loop1:
   127 00000072 803B00                      cmp byte[ebx],0		;; diposisikan pada akhir string strhasil
   128 00000075 7406                        je NEXTNULL
   129 00000077 C60320                      mov byte[ebx],32
   130 0000007A 43                          inc ebx
   131 0000007B EBF5                        jmp loop1
   132                                  
   133                                  NEXTNULL:
   134 0000007D 4B                      	dec ebx
   135                                  
   136 0000007E 66BE0A00                	mov si,10	      		
   137                                   loop2:				
   138 00000082 31D2                    	xor edx, edx		;; edx di-nolkan untuk menampung sisa bagi
   139 00000084 66F7F6                  	div si			;; dilakukan pembagian 10 berulang
   140 00000087 80C230                  	add dl, '0'        	;; sisa bagi pada edx (dl) di ubah ke character
   141 0000008A 8813                    	mov [ebx], dl		;; simpan ke strhasil dari belakang ke depan
   142 0000008C 4B                      	dec ebx			;; majukan pointer
   143 0000008D 09C0                    	or  eax,eax		;; test apakah yang dibagi sudah nol
   144 0000008F 75F1                    	jnz loop2 		;; selesai perulangan jika yang dibagi sdh nol   
   145                                  
   146 00000091 C3                      ret 
